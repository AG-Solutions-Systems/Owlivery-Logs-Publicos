<div align="center">

  <p>üå©Ô∏è AgDB √© um banco de dados baseado em JSON pequeno, leve, 0 depend√™ncias e f√°cil de usar que permite aos usu√°rios obter persist√™ncia de dados de forma r√°pida e f√°cil, fornecendo um mecanismo para armazenar e acessar dados JSON para NodeJS.</p>

  <a href="https://npmjs.com/package/agdb">
    <img src="https://img.shields.io/npm/v/agdb?color=green">
  </a>
  <a href="https://bundlephobia.com/result?p=agdb">
    <img src="https://img.shields.io/bundlephobia/minzip/agdb?color=green">
  </a>
  <img src="https://img.shields.io/badge/dependencies-0-brightgreen?color=blue">
  <a href="./LICENSE">
    <img src="https://img.shields.io/badge/license-MIT-blue">
  </a>
</div>

<br>

> Exemplo: adicione um post em users.alee e salve no banco de dados.

```js
db.get("users")
  .get("alee")
  .push({ title: "Post 1" })
  .save();
```

## Caracter√≠sticas

- üèéÔ∏è Velocidades incrivelmente r√°pidas - Velocidades de leitura e grava√ß√£o r√°pidas, mesmo ao lidar com grandes volumes de dados.
- üì¶ [Tamanho min√∫sculo](https://bundlephobia.com/result?p=agdb) - O tamanho min√∫sculo do c√≥digo-fonte permite um carregamento incrivelmente r√°pido quando a velocidade √© importante.
- ‚ö°Ô∏è Vers√°til - Pode ser usado com NodeJS, no navegador ou no Electron.

## Uso

instale agDB com NPM:

```
$ npm i agdb
```

Uso b√°sico com NodeJS:

```js
const agDB = require("agdb");

// iniciar db com "./db.agdb" local de armazenamento
const engine = new agDB.localFileEngine("./db.agdb");
const db = new agDB(engine);

// definir valor db padr√£o se a db estiver vazia
db.default({ users: [] });

// add novo dado em users
db.get("users").push({ name: "alee" });

// atualizar users.name do primeiro usu√°rio
db.get("users")
  .get(0)
  .get("name")
  .set("jeff");

// salvar altera√ß√µes na db
db.save();
```

O arquivo de banco de dados `db.agdb` √© atualizado para:

```js
{
  "users": [
    {"name":"jeff"}
  ]
}
```

Uso com Typescript:

```ts
import agDB from "agdb";

// iniciar db com "./db.agdb" local de armazenamento
const engine = new agDB.localFileEngine("./db.agdb");
const db = new agDB(engine);
```

O agDB foi projetado para ser flex√≠vel, podendo ser usado no NodeJS, no navegador ou at√© mesmo no Electron com adapta√ß√µes muito pequenas no c√≥digo. Exemplos de usos podem ser vistos abaixo:
- [Uso do navegador](./examples/browser.md)
- [Servidor NodeJS](./examples/node.md)

## Engine API

Para expandir a funcionalidade, cada banco de dados inicializado pode ser expandido com as seguintes op√ß√µes, no formato `new Engine(path, options);`.

- `serialize` - fun√ß√£o para serializar dados antes de escrev√™-los no banco de dados.
- `deserialize` - fun√ß√£o para desserializar dados do banco de dados.

## Exemplos de opera√ß√µes de banco de dados

Altere o valor da chave no banco de dados:

```js
db.get("old").set("newData");
// Antes: {"old": "oldData"}
// Depois: {"old": "newData"}
```

Retornar o valor Raw de uma propriedade selecionada:

```js
// Antes {"list": [1, 2, 3]}
db.get("list").value(); // returns [1, 2, 3]
```

Defina um valor para a chave:

```js
db.set("chave", "valor").save();
// Antes: {}
// Depois: {"chave": "valor"}
```

Deletar um valor:

```js
db.get("chave").delete();
// Antes: {'chave': 'valor', 'chave2': 'valor2'}
// Depois: {'chave2': 'valor2'}
```

Se voc√™ excluir um valor de uma lista, ele deixar√° um valor nulo no lugar dos dados exclu√≠dos:

```js
db.get("chave")
  .get(1)
  .delete();
// Antes: {'chave': [1, 2, 3]}
// Depois: {'chave': [1, null, 3]}
```

Se voc√™ n√£o quer este comportamento, voc√™ pode passar `true` para a fun√ß√£o `.delete()` para n√£o deixar um valor nulo no lugar dos dados exclu√≠dos:

```js
db.get("chave")
  .get(1)
  .delete(true);
// Antes: {'chave': [1, 2, 3]}
// Depois: {'chave': [1, 3]}
```

Defina um valor para a chave2 dentro da chave:

```js
db.set("chave.chave2", "valor").save();
// Antes: {}
// Depois: {"chave": {"chave2": "valor"}}
```

Observe que as fun√ß√µes `set` e `get` permitem o uso de . para as chaves, se voc√™ n√£o quiser esse comportamento, voc√™ pode ter uma chave com um . incluso, voc√™ pode desativar fornecendo um par√¢metro extra :

```js
db.get("um.dois", false).set("tres.quatro", "teste", false);
// Antes: {"um.dois": {}}
// Depois: {"um.dois": {"tres.quatro": "teste"}}
```

Definir dados padr√£o para db vazia:

```js
db.default({ name: "alee" });

// atual db: {}
console.log(db.get("name")); // imprime "alee"
```

Executar um Push no Array:

```js
db.get("lista")
  .push(1)
  .save();

// Antes: {'lista': []}
// Depois: {'lista': [1]}
```

Filtrar todos os elementos abaixo de 5:

```js
// Antes = {'list': [1,2,6,1]}
// output = {'list': [6]}

db.get("lista").filter(i => i >= 5);

// salvar db
db.save();
```

Alterar elemento com valor mais alto:

```js
// Antes = {'users': [{valor: 10}, {valor: 5}, {valor: 6}]}
// Depois = {'users': [{valor: "alterado"}, {valor: 6}, {valor: 5}]}

db.get("users").sort((a, b) => b.valor - a.valor);

// Alterar elemento com valor mais alto
db.get("users")
  .get(0)
  .get("valor")
  .set("alterado");

// salvar db
db.save();
```

Execute um Map em uma Lista, e resulte a raiz quadrada de todos os n√∫meros na lista:

```js
// Antes = {'data': [1,2,3,4,5]}
// Depois = {'data': [1,4,9,16,25]}

// raiz quadrada de todos os n√∫meros na lista
db.get("data").map(x => x ** 2);

// salvar db
db.save();
```

Reduzir lista, encontrando todos os valores da lista e os somando:

```js
// Antes = {'data': [1,2,3,4,5]}
// Depois = {'data': 15}

// find value of all numbers in list summed together
db.get("data").reduce(
  (total, atual) => total + atual
);

// salvar db
db.save();
```

Aproveite as fun√ß√µes Serialize e Deserialize para criptografar e descriptografar dados:

```js
const engine = new agDB.localFileEngine("./db.agdb", {
  serialize: data => {
    // criptografar e serializar dados
    return encrypt(JSON.stringify(data));
  },
  deserialize: data => {
    // descriptografar e desserializar dados
    return JSON.parse(decrypt(data));
  }
});
const db = new agDB(engine);
```

## Cr√©dito

Autor: [Tom](https://github.com/TomPrograms) Colaborador - Reeditor: [AleeQuintino](https://github.com/TomPrograms)

## Licen√ßa

[MIT](LICENSE)
